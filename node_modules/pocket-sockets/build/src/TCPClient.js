"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TCPClient = void 0;
const net = __importStar(require("net"));
const tls = __importStar(require("tls"));
const Client_1 = require("./Client");
/**
 * TCP client socket implementation.
 */
class TCPClient extends Client_1.Client {
    constructor(clientOptions, socket) {
        super(clientOptions);
        this.error = (error) => {
            this.socketError(Buffer.from(error.message));
        };
        this.socket = socket;
        if (this.socket) {
            this.socketHook();
        }
    }
    /**
     * @return {string | undefined} local IP address
     */
    getLocalAddress() {
        if (this.socket && typeof this.socket.localAddress === "string") {
            return this.socket.localAddress;
        }
    }
    /**
     * @return {string | undefined} remote IP address
     */
    getRemoteAddress() {
        if (this.socket && typeof this.socket.remoteAddress === "string") {
            return this.socket.remoteAddress;
        }
    }
    /**
     * @return {number | undefined} remote port
     */
    getRemotePort() {
        if (this.socket && typeof this.socket.remotePort === "number") {
            return this.socket.remotePort;
        }
    }
    /**
     * @return {number | undefined} local port
     */
    getLocalPort() {
        if (this.socket && typeof this.socket.localPort === "number") {
            return this.socket.localPort;
        }
    }
    /**
     * Specifies how the socket gets initialized and created, then establishes a connection.
     */
    socketConnect() {
        if (this.socket) {
            throw "Socket already created.";
        }
        if (!this.clientOptions) {
            throw "clientOptions is required to create socket.";
        }
        const USE_TLS = this.clientOptions.secure ? true : false;
        if (USE_TLS) {
            this.socket = tls.connect({
                host: this.clientOptions.host,
                port: this.clientOptions.port,
                cert: this.clientOptions.cert,
                key: this.clientOptions.key,
                rejectUnauthorized: this.clientOptions.rejectUnauthorized,
                ca: this.clientOptions.ca
            });
            if (this.socket) {
                this.socket.on("secureConnect", this.socketConnected);
            }
        }
        else {
            this.socket = net.connect({
                host: this.clientOptions.host,
                port: this.clientOptions.port,
            });
            if (this.socket) {
                this.socket.on("connect", this.socketConnected);
            }
        }
        if (!this.socket) {
            throw "Could not create socket.";
        }
    }
    /**
     * Specifies hooks to be called as part of the connect procedure.
     */
    socketHook() {
        if (!this.socket) {
            return;
        }
        this.socket.on("data", this.socketData); // Incoming data
        this.socket.on("error", this.error); // Error connecting
        this.socket.on("close", this.socketClosed); // Socket closed
    }
    /**
     * Defines how data gets written to the socket.
     * @param {Buffer} buffer - data to be sent
     */
    socketSend(buffer) {
        if (this.socket) {
            this.socket.write(buffer);
        }
    }
    /**
     * Defines the steps to be performed during close.
     */
    socketClose() {
        if (this.socket) {
            this.socket.end();
        }
    }
}
exports.TCPClient = TCPClient;
