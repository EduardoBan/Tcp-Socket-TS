"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WSServer = void 0;
const Server_1 = require("./Server");
const WSClient_1 = require("./WSClient");
const WebSocket = __importStar(require("ws"));
const http = __importStar(require("http"));
const https = __importStar(require("https"));
/**
 * WebSocket server implementation.
 */
class WSServer extends Server_1.Server {
    constructor(serverOptions) {
        super(serverOptions);
        this.clientConnected = (socket) => {
            const client = new WSClient_1.WSClient({ bufferData: this.serverOptions.bufferData, port: this.serverOptions.port }, socket);
            this.addClient(client);
        };
        this.error = (error) => {
            this.serverError(Buffer.from(error.message));
        };
        this.serverCreate();
    }
    /**
     * Specifies how the server gets initialized, then creates the server with the specified options.
     */
    serverCreate() {
        const USE_TLS = this.serverOptions.cert != null;
        if (USE_TLS) {
            const tlsOptions = {
                cert: this.serverOptions.cert,
                key: this.serverOptions.key,
                requestCert: this.serverOptions.requestCert,
                rejectUnauthorized: this.serverOptions.rejectUnauthorized,
                ca: this.serverOptions.ca,
                handshakeTimeout: 30000,
            };
            this.server = https.createServer(tlsOptions);
            if (this.server) {
                this.server.on("tlsClientError", this.error);
            }
        }
        else {
            this.server = http.createServer();
        }
    }
    /**
     * Starts a previously created server listening for connections.
     * Assumes the server is instantiated during object creation.
     */
    serverListen() {
        var _a;
        this.wsServer = new WebSocket.Server({
            path: "/",
            server: this.server,
            clientTracking: true,
            perMessageDeflate: false,
            maxPayload: 100 * 1024 * 1024,
        });
        this.wsServer.on("connection", this.clientConnected);
        this.wsServer.on("error", this.error);
        this.wsServer.on("close", this.serverClosed);
        (_a = this.server) === null || _a === void 0 ? void 0 : _a.listen({
            host: this.serverOptions.host,
            port: this.serverOptions.port,
            ipv6Only: this.serverOptions.ipv6Only,
        });
    }
    /**
     * Overrides server close procedure.
     */
    serverClose() {
        if (this.wsServer) {
            this.wsServer.close();
        }
        if (this.server) {
            this.server.close();
        }
    }
}
exports.WSServer = WSServer;
