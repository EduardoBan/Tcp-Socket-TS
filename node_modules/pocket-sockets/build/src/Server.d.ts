import { Client } from "./Client";
import { ServerOptions } from "./types";
/**
 * Boilerplate for creating and wrapping a server socket listener (TCP or Websocket) under a common interface.
 *
 * Socket specific functions need to be overridden/implemented.
 *
 */
export declare abstract class Server {
    serverOptions: ServerOptions;
    eventHandlers: {
        [key: string]: Function[];
    };
    isClosed: boolean;
    clients: Client[];
    constructor(serverOptions: ServerOptions);
    /**
     * Listens for connections and yields connected client sockets.
     *
     */
    listen(): void;
    /**
     * Close listener and all accepted socket clients.
     */
    close(): void;
    /**
     * Event handler triggered when client has connected.
     *
     * A Client object is passed as argument to fn() of the instance type this.SocketClass.
     *
     * @param {Function} fn callback
     */
    onConnection(fn: Function): void;
    /**
     * Event handler triggered when a server error occurs.
     *
     * An error object is passed as argument to fn().
     *
     * @param {Function} fn callback
     */
    onError(fn: Function): void;
    /**
     * Event handler triggered when server has closed together with all its client sockets.
     *
     * @param {Function} fn callback
     */
    onClose(fn: Function): void;
    /**
     * Create the server socket.
     */
    protected serverCreate(): void;
    /**
     * Initiate the server listener.
     */
    protected serverListen(): void;
    /**
     * Close the server.
     * Override as necessary.
     */
    protected serverClose(): void;
    /**
     * Internal error event implementation.
     *
     * @param {Error} err
     */
    protected serverError: (err: any) => void;
    /**
     * Internal close event implementation.
     */
    protected serverClosed: () => void;
    /**
     * Performs all operations involved in registering a new client connection.
     *
     * @param {Client} client
     */
    protected addClient(client: Client): void;
    /**
     * Performs all operations involved in removing an existing client registration.
     *
     * @param {Client} client
     */
    private removeClient;
    /**
     * Internal event implementation.
     *
     * @param {string} event
     * @param {Function} fn
     */
    private on;
    /**
     * Internal event trigger implementation.
     *
     * @param {string} event
     * @param {any} data
     */
    private triggerEvent;
}
