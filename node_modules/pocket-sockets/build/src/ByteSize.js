"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ByteSize = void 0;
class ByteSize {
    constructor(client) {
        this.onClose = () => {
            if (this.reject) {
                const reject = this.reject;
                this.end();
                reject("Socket closed");
            }
        };
        this.onData = (buf) => {
            var _a;
            if (this.ended) {
                return;
            }
            this.data = Buffer.concat([this.data, buf]);
            if (!this.resolve) {
                return;
            }
            const nrBytes = (_a = this.nrBytes) !== null && _a !== void 0 ? _a : 0;
            if (this.data.length >= nrBytes) {
                const bite = this.data.slice(0, nrBytes);
                this.data = this.data.slice(nrBytes);
                const resolve = this.resolve;
                this.end();
                resolve(bite);
            }
        };
        this.client = client;
        this.data = Buffer.alloc(0);
        this.client.onData(this.onData);
        this.client.onClose(this.onClose);
        this.ended = false;
    }
    async read(nrBytes, timeout = 3000) {
        if (this.ended || this.timeoutId) {
            throw "Cannot reuse a ByteSize";
        }
        this.nrBytes = nrBytes;
        if (timeout) {
            this.timeoutId = setTimeout(() => {
                delete this.timeoutId;
                if (this.reject) {
                    const reject = this.reject;
                    this.end();
                    reject("Timeout");
                }
            }, timeout);
        }
        return new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
            this.onData(Buffer.alloc(0));
        });
    }
    end() {
        if (this.ended) {
            return;
        }
        this.ended = true;
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
        }
        this.client.offData(this.onData);
        this.client.offClose(this.onClose);
        delete this.reject;
        delete this.resolve;
        this.client.unRead(this.data);
    }
}
exports.ByteSize = ByteSize;
